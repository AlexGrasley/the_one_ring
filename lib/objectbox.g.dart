    // GENERATED CODE - DO NOT MODIFY BY HAND
    // This code was generated by ObjectBox. To update it run the generator again:
    // With a Flutter package, run `flutter pub run build_runner build`.
    // With a Dart package, run `dart run build_runner build`.
    // See also https://docs.objectbox.io/getting-started#generate-objectbox-code

    // ignore_for_file: camel_case_types, depend_on_referenced_packages
    // coverage:ignore-file

    import 'dart:typed_data';

    import 'package:flat_buffers/flat_buffers.dart' as fb;
    import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
    import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

    import 'Models/Armour.dart';
 import 'Models/Character.dart';
 import 'Models/CombatProficiencies.dart';
 import 'Models/Rewards.dart';
 import 'Models/Skills.dart';
 import 'Models/Virtues.dart';
 import 'Models/Weapon.dart';

    export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

    final _entities = <ModelEntity>[
          ModelEntity(
      id: const IdUid(1, 8664419718943486843),
      name: 'Armour',
      lastPropertyId: const IdUid(4, 8643292553265226198),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 7431753907051835114),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 1880272113421351346),
      name: 'rating',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 8342604972678633963),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(4, 8643292553265226198),
      name: 'note',
      type: 9,
      flags: 0
      
    )
    
      ],
      relations: <ModelRelation>[
        
      ],
      backlinks: <ModelBacklink>[
        
      ]
    )
    ,    ModelEntity(
      id: const IdUid(2, 5764273947751663996),
      name: 'Character',
      lastPropertyId: const IdUid(35, 8452193898751331593),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 7697350618829279040),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 4461314148298708079),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 2602287250012657045),
      name: 'heroicCulture',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(4, 2288402919474192753),
      name: 'culturalBlessing',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(5, 6266860470803613798),
      name: 'patron',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(6, 7888206921429061495),
      name: 'calling',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(7, 3534671488573680065),
      name: 'shadowPath',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(8, 147279667790388832),
      name: 'distinctiveFeatures',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(9, 1367115741379373834),
      name: 'flaws',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(10, 7236375195856880096),
      name: 'travellingGear',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(11, 1672721990998863827),
      name: 'age',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(12, 4534077730449155618),
      name: 'treasure',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(13, 133351962534624265),
      name: 'strengthTn',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(14, 4282675439098785620),
      name: 'strengthRating',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(15, 1206866237731743842),
      name: 'endurance',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(16, 1856715435206237403),
      name: 'heartTn',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(17, 3571458335139886266),
      name: 'heartRating',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(18, 5764328447489685213),
      name: 'hope',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(19, 9048852488976007770),
      name: 'witsTn',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(20, 8395773936123915561),
      name: 'witsRating',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(21, 1136577535592128408),
      name: 'parry',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(22, 5007831777553948139),
      name: 'adventurePoint',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(23, 3554011561669824215),
      name: 'skillPoints',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(24, 7661912214421215493),
      name: 'fellowshipScore',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(25, 5522440300585792084),
      name: 'currentEndurance',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(26, 6899478257904290656),
      name: 'load',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(27, 4052278961398544630),
      name: 'fatigue',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(28, 8723723598036580349),
      name: 'currentHope',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(29, 3212467213684906235),
      name: 'shadow',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(30, 6791484883980131474),
      name: 'shadowScars',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(31, 8421375951732249701),
      name: 'valour',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(32, 202394291586327546),
      name: 'wisdom',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(33, 1078154795386870187),
      name: 'weary',
      type: 1,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(34, 8939461034503792779),
      name: 'miserable',
      type: 1,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(35, 8452193898751331593),
      name: 'wounded',
      type: 1,
      flags: 0
      
    )
    
      ],
      relations: <ModelRelation>[
            ModelRelation(
      id: const IdUid(1, 2106573359653455199),
      name: 'rewards',
      targetId: const IdUid(4, 4241397220175954720)
    )
    ,    ModelRelation(
      id: const IdUid(2, 4174868222778717780),
      name: 'virtues',
      targetId: const IdUid(6, 8840369180959170893)
    )
    ,    ModelRelation(
      id: const IdUid(3, 8400452106340809413),
      name: 'weapons',
      targetId: const IdUid(7, 194795876836641174)
    )
    ,    ModelRelation(
      id: const IdUid(5, 4578893645621621554),
      name: 'armour',
      targetId: const IdUid(1, 8664419718943486843)
    )
    ,    ModelRelation(
      id: const IdUid(6, 1690858102240495363),
      name: 'combatProficiencies',
      targetId: const IdUid(3, 481044199291432598)
    )
    
      ],
      backlinks: <ModelBacklink>[
            ModelBacklink(
      name: 'skills',
      srcEntity: 'Skill',
      srcField: 'character'
    )
    
      ]
    )
    ,    ModelEntity(
      id: const IdUid(3, 481044199291432598),
      name: 'CombatProficiencies',
      lastPropertyId: const IdUid(4, 1830284473786916616),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 4296582310138937315),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 543951516759100031),
      name: 'proficiency',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 562987166547644492),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(4, 1830284473786916616),
      name: 'characterId',
      type: 11,
      flags: 520
      , indexId: const IdUid(2, 4945883188977238138), relationTarget: 'Character'
    )
    
      ],
      relations: <ModelRelation>[
        
      ],
      backlinks: <ModelBacklink>[
        
      ]
    )
    ,    ModelEntity(
      id: const IdUid(4, 4241397220175954720),
      name: 'Reward',
      lastPropertyId: const IdUid(5, 476372642950773498),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 7573535520432376535),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 7972231701556305748),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 7066033505606660404),
      name: 'note',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(4, 1197057239372283498),
      name: 'armourId',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(5, 476372642950773498),
      name: 'weaponId',
      type: 6,
      flags: 0
      
    )
    
      ],
      relations: <ModelRelation>[
        
      ],
      backlinks: <ModelBacklink>[
        
      ]
    )
    ,    ModelEntity(
      id: const IdUid(5, 5486256926819336373),
      name: 'Skill',
      lastPropertyId: const IdUid(6, 1744921040346236002),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 4519096406711325380),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 434892533517214545),
      name: 'pips',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 8719822899400299863),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(4, 8793439803702896348),
      name: 'isFavored',
      type: 1,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(5, 2276169506293343640),
      name: 'characterId',
      type: 11,
      flags: 520
      , indexId: const IdUid(1, 8150577807690394722), relationTarget: 'Character'
    )
    ,    ModelProperty(
      id: const IdUid(6, 1744921040346236002),
      name: 'skillClass',
      type: 9,
      flags: 0
      
    )
    
      ],
      relations: <ModelRelation>[
        
      ],
      backlinks: <ModelBacklink>[
        
      ]
    )
    ,    ModelEntity(
      id: const IdUid(6, 8840369180959170893),
      name: 'Virtue',
      lastPropertyId: const IdUid(3, 7829482298153891110),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 5363880653634536933),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 7751589334314264423),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 7829482298153891110),
      name: 'note',
      type: 9,
      flags: 0
      
    )
    
      ],
      relations: <ModelRelation>[
        
      ],
      backlinks: <ModelBacklink>[
        
      ]
    )
    ,    ModelEntity(
      id: const IdUid(7, 194795876836641174),
      name: 'Weapon',
      lastPropertyId: const IdUid(5, 2045895292788964708),
      flags: 0,
      properties: <ModelProperty>[
            ModelProperty(
      id: const IdUid(1, 7593599520335976578),
      name: 'id',
      type: 6,
      flags: 1
      
    )
    ,    ModelProperty(
      id: const IdUid(2, 4193758242738061898),
      name: 'damage',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(3, 2958137450387762622),
      name: 'injury',
      type: 6,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(4, 5789784448918697380),
      name: 'name',
      type: 9,
      flags: 0
      
    )
    ,    ModelProperty(
      id: const IdUid(5, 2045895292788964708),
      name: 'note',
      type: 9,
      flags: 0
      
    )
    
      ],
      relations: <ModelRelation>[
        
      ],
      backlinks: <ModelBacklink>[
        
      ]
    )
    
    ];

    /// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
    /// apps by default a [directory] using `defaultStoreDirectory()` from the
    /// ObjectBox Flutter library.
    ///
    /// Note: for desktop apps it is recommended to specify a unique [directory].
    /// 
    /// See [Store.new] for an explanation of all parameters.
    Future<Store> openStore(
        {String? directory,
          int? maxDBSizeInKB,
          int? fileMode,
          int? maxReaders,
          bool queriesCaseSensitiveDefault = true,
          String? macosApplicationGroup}) async =>
        Store(getObjectBoxModel(),
            directory: directory ?? (await defaultStoreDirectory()).path,
            maxDBSizeInKB: maxDBSizeInKB,
            fileMode: fileMode,
            maxReaders: maxReaders,
            queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
            macosApplicationGroup: macosApplicationGroup);
            

    /// Returns the ObjectBox model definition for this project for use with 
    /// [Store.new].
    ModelDefinition getObjectBoxModel() {
          final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 194795876836641174),
      lastIndexId: const IdUid(2, 4945883188977238138),
      lastRelationId: const IdUid(6, 1690858102240495363),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [2376674275859451071],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);
    

      final bindings = <Type, EntityDefinition>{
        Armour:       EntityDefinition<Armour>(
        model: _entities[0],
        toOneRelations: (Armour object) => [],
        toManyRelations: (Armour object) => {},
        getId: (Armour object) => object.id,
        setId: (Armour object, int id) {object.id = id;},
        objectToFB: (Armour object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
final noteOffset =  fbb.writeString(object.note);
      fbb.startTable(5);
      fbb.addInt64(0, object.id);
fbb.addInt64(1, object.rating);
fbb.addOffset(2, nameOffset);
fbb.addOffset(3, noteOffset);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final ratingParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
final noteParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, '');
      final object = Armour(nameParam, 
id: idParam, 
rating: ratingParam, 
note: noteParam);
      
      return object;
    }
      )
      ,
Character:       EntityDefinition<Character>(
        model: _entities[1],
        toOneRelations: (Character object) => [],
        toManyRelations: (Character object) => {RelInfo<Character>.toMany(1, object.id): object.rewards,RelInfo<Character>.toMany(2, object.id): object.virtues,RelInfo<Character>.toMany(3, object.id): object.weapons,RelInfo<Character>.toMany(5, object.id): object.armour,RelInfo<Character>.toMany(6, object.id): object.combatProficiencies,RelInfo<Skill>.toOneBacklink(5, object.id, (Skill srcObject) => srcObject.character): object.skills},
        getId: (Character object) => object.id,
        setId: (Character object, int id) {object.id = id;},
        objectToFB: (Character object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
final heroicCultureOffset =  fbb.writeString(object.heroicCulture);
final culturalBlessingOffset =  fbb.writeString(object.culturalBlessing);
final patronOffset =  fbb.writeString(object.patron);
final callingOffset =  fbb.writeString(object.calling);
final shadowPathOffset =  fbb.writeString(object.shadowPath);
final distinctiveFeaturesOffset =  fbb.writeString(object.distinctiveFeatures);
final flawsOffset =  fbb.writeString(object.flaws);
final travellingGearOffset =  fbb.writeString(object.travellingGear);
      fbb.startTable(36);
      fbb.addInt64(0, object.id);
fbb.addOffset(1, nameOffset);
fbb.addOffset(2, heroicCultureOffset);
fbb.addOffset(3, culturalBlessingOffset);
fbb.addOffset(4, patronOffset);
fbb.addOffset(5, callingOffset);
fbb.addOffset(6, shadowPathOffset);
fbb.addOffset(7, distinctiveFeaturesOffset);
fbb.addOffset(8, flawsOffset);
fbb.addOffset(9, travellingGearOffset);
fbb.addInt64(10, object.age);
fbb.addInt64(11, object.treasure);
fbb.addInt64(12, object.strengthTn);
fbb.addInt64(13, object.strengthRating);
fbb.addInt64(14, object.endurance);
fbb.addInt64(15, object.heartTn);
fbb.addInt64(16, object.heartRating);
fbb.addInt64(17, object.hope);
fbb.addInt64(18, object.witsTn);
fbb.addInt64(19, object.witsRating);
fbb.addInt64(20, object.parry);
fbb.addInt64(21, object.adventurePoint);
fbb.addInt64(22, object.skillPoints);
fbb.addInt64(23, object.fellowshipScore);
fbb.addInt64(24, object.currentEndurance);
fbb.addInt64(25, object.load);
fbb.addInt64(26, object.fatigue);
fbb.addInt64(27, object.currentHope);
fbb.addInt64(28, object.shadow);
fbb.addInt64(29, object.shadowScars);
fbb.addInt64(30, object.valour);
fbb.addInt64(31, object.wisdom);
fbb.addBool(32, object.weary);
fbb.addBool(33, object.miserable);
fbb.addBool(34, object.wounded);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, '');
final heroicCultureParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
final culturalBlessingParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, '');
final patronParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, '');
final callingParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, '');
final shadowPathParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 16, '');
final distinctiveFeaturesParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, '');
final flawsParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, '');
final travellingGearParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, '');
final ageParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
final treasureParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
final strengthTnParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
final strengthRatingParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
final enduranceParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
final heartTnParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0);
final heartRatingParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0);
final hopeParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0);
final witsTnParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0);
final witsRatingParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
final parryParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 44, 0);
final adventurePointParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 46, 0);
final skillPointsParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 48, 0);
final fellowshipScoreParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 50, 0);
final currentEnduranceParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 52, 0);
final loadParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 54, 0);
final fatigueParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 56, 0);
final currentHopeParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 58, 0);
final shadowParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 60, 0);
final shadowScarsParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 62, 0);
final valourParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 64, 0);
final wisdomParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 66, 0);
final wearyParam = const fb.BoolReader().vTableGet(buffer, rootOffset, 68, false);
final miserableParam = const fb.BoolReader().vTableGet(buffer, rootOffset, 70, false);
final woundedParam = const fb.BoolReader().vTableGet(buffer, rootOffset, 72, false);
final skillsParam = ToMany<Skill>();
final rewardsParam = ToMany<Reward>();
final armourParam = ToMany<Armour>();
final virtuesParam = ToMany<Virtue>();
final weaponsParam = ToMany<Weapon>();
final combatProficienciesParam = ToMany<CombatProficiencies>();
      final object = Character(id: idParam, 
name: nameParam, 
heroicCulture: heroicCultureParam, 
culturalBlessing: culturalBlessingParam, 
patron: patronParam, 
calling: callingParam, 
shadowPath: shadowPathParam, 
distinctiveFeatures: distinctiveFeaturesParam, 
flaws: flawsParam, 
travellingGear: travellingGearParam, 
age: ageParam, 
treasure: treasureParam, 
strengthTn: strengthTnParam, 
strengthRating: strengthRatingParam, 
endurance: enduranceParam, 
heartTn: heartTnParam, 
heartRating: heartRatingParam, 
hope: hopeParam, 
witsTn: witsTnParam, 
witsRating: witsRatingParam, 
parry: parryParam, 
adventurePoint: adventurePointParam, 
skillPoints: skillPointsParam, 
fellowshipScore: fellowshipScoreParam, 
currentEndurance: currentEnduranceParam, 
load: loadParam, 
fatigue: fatigueParam, 
currentHope: currentHopeParam, 
shadow: shadowParam, 
shadowScars: shadowScarsParam, 
valour: valourParam, 
wisdom: wisdomParam, 
weary: wearyParam, 
miserable: miserableParam, 
wounded: woundedParam, 
skills: skillsParam, 
rewards: rewardsParam, 
armour: armourParam, 
virtues: virtuesParam, 
weapons: weaponsParam, 
combatProficiencies: combatProficienciesParam);
      InternalToManyAccess.setRelInfo<Character>(object.rewards, store, RelInfo<Character>.toMany(1, object.id));
InternalToManyAccess.setRelInfo<Character>(object.virtues, store, RelInfo<Character>.toMany(2, object.id));
InternalToManyAccess.setRelInfo<Character>(object.weapons, store, RelInfo<Character>.toMany(3, object.id));
InternalToManyAccess.setRelInfo<Character>(object.armour, store, RelInfo<Character>.toMany(5, object.id));
InternalToManyAccess.setRelInfo<Character>(object.combatProficiencies, store, RelInfo<Character>.toMany(6, object.id));
InternalToManyAccess.setRelInfo<Character>(object.skills, store, RelInfo<Skill>.toOneBacklink(5, object.id, (Skill srcObject) => srcObject.character));
      return object;
    }
      )
      ,
CombatProficiencies:       EntityDefinition<CombatProficiencies>(
        model: _entities[2],
        toOneRelations: (CombatProficiencies object) => [object.character],
        toManyRelations: (CombatProficiencies object) => {},
        getId: (CombatProficiencies object) => object.id,
        setId: (CombatProficiencies object, int id) {object.id = id;},
        objectToFB: (CombatProficiencies object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
      fbb.startTable(5);
      fbb.addInt64(0, object.id);
fbb.addInt64(1, object.proficiency);
fbb.addOffset(2, nameOffset);
fbb.addInt64(3, object.character.targetId);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
final proficiencyParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
      final object = CombatProficiencies(id: idParam, 
name: nameParam, 
proficiency: proficiencyParam);
      object.character.targetId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
object.character.attach(store);
      return object;
    }
      )
      ,
Reward:       EntityDefinition<Reward>(
        model: _entities[3],
        toOneRelations: (Reward object) => [],
        toManyRelations: (Reward object) => {},
        getId: (Reward object) => object.id,
        setId: (Reward object, int id) {object.id = id;},
        objectToFB: (Reward object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
final noteOffset =  fbb.writeString(object.note);
      fbb.startTable(6);
      fbb.addInt64(0, object.id);
fbb.addOffset(1, nameOffset);
fbb.addOffset(2, noteOffset);
fbb.addInt64(3, object.armourId);
fbb.addInt64(4, object.weaponId);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, '');
final noteParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
final armourIdParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
final weaponIdParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
      final object = Reward(id: idParam, 
name: nameParam, 
note: noteParam, 
armourId: armourIdParam, 
weaponId: weaponIdParam);
      
      return object;
    }
      )
      ,
Skill:       EntityDefinition<Skill>(
        model: _entities[4],
        toOneRelations: (Skill object) => [object.character],
        toManyRelations: (Skill object) => {},
        getId: (Skill object) => object.id,
        setId: (Skill object, int id) {object.id = id;},
        objectToFB: (Skill object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
final skillClassOffset =  fbb.writeString(object.skillClass);
      fbb.startTable(7);
      fbb.addInt64(0, object.id);
fbb.addInt64(1, object.pips);
fbb.addOffset(2, nameOffset);
fbb.addBool(3, object.isFavored);
fbb.addInt64(4, object.character.targetId);
fbb.addOffset(5, skillClassOffset);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final pipsParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
final isFavoredParam = const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
final skillClassParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 14, '');
      final object = Skill(id: idParam, 
pips: pipsParam, 
name: nameParam, 
isFavored: isFavoredParam, 
skillClass: skillClassParam);
      object.character.targetId = const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
object.character.attach(store);
      return object;
    }
      )
      ,
Virtue:       EntityDefinition<Virtue>(
        model: _entities[5],
        toOneRelations: (Virtue object) => [],
        toManyRelations: (Virtue object) => {},
        getId: (Virtue object) => object.id,
        setId: (Virtue object, int id) {object.id = id;},
        objectToFB: (Virtue object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
final noteOffset =  fbb.writeString(object.note);
      fbb.startTable(4);
      fbb.addInt64(0, object.id);
fbb.addOffset(1, nameOffset);
fbb.addOffset(2, noteOffset);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, '');
final noteParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 8, '');
      final object = Virtue(id: idParam, 
name: nameParam, 
note: noteParam);
      
      return object;
    }
      )
      ,
Weapon:       EntityDefinition<Weapon>(
        model: _entities[6],
        toOneRelations: (Weapon object) => [],
        toManyRelations: (Weapon object) => {},
        getId: (Weapon object) => object.id,
        setId: (Weapon object, int id) {object.id = id;},
        objectToFB: (Weapon object, fb.Builder fbb) {
      final nameOffset =  fbb.writeString(object.name);
final noteOffset =  fbb.writeString(object.note);
      fbb.startTable(6);
      fbb.addInt64(0, object.id);
fbb.addInt64(1, object.damage);
fbb.addInt64(2, object.injury);
fbb.addOffset(3, nameOffset);
fbb.addOffset(4, noteOffset);
      fbb.finish(fbb.endTable());
      return object.id;
    },
        objectFromFB: (Store store, ByteData fbData) {
      final buffer = fb.BufferContext(fbData);
      final rootOffset = buffer.derefObject(0);
      final idParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
final damageParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
final injuryParam = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
final nameParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 10, '');
final noteParam = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 12, '');
      final object = Weapon(id: idParam, 
damage: damageParam, 
injury: injuryParam, 
name: nameParam, 
note: noteParam);
      
      return object;
    }
      )
      
      };

      return ModelDefinition(model, bindings);
    }

          /// [Armour] entity fields to define ObjectBox queries.
      class Armour_ {        /// see [Armour.id]
        static final id = QueryIntegerProperty<Armour>(_entities[0].properties[0]);        /// see [Armour.rating]
        static final rating = QueryIntegerProperty<Armour>(_entities[0].properties[1]);        /// see [Armour.name]
        static final name = QueryStringProperty<Armour>(_entities[0].properties[2]);        /// see [Armour.note]
        static final note = QueryStringProperty<Armour>(_entities[0].properties[3]);}
    
      /// [Character] entity fields to define ObjectBox queries.
      class Character_ {        /// see [Character.id]
        static final id = QueryIntegerProperty<Character>(_entities[1].properties[0]);        /// see [Character.name]
        static final name = QueryStringProperty<Character>(_entities[1].properties[1]);        /// see [Character.heroicCulture]
        static final heroicCulture = QueryStringProperty<Character>(_entities[1].properties[2]);        /// see [Character.culturalBlessing]
        static final culturalBlessing = QueryStringProperty<Character>(_entities[1].properties[3]);        /// see [Character.patron]
        static final patron = QueryStringProperty<Character>(_entities[1].properties[4]);        /// see [Character.calling]
        static final calling = QueryStringProperty<Character>(_entities[1].properties[5]);        /// see [Character.shadowPath]
        static final shadowPath = QueryStringProperty<Character>(_entities[1].properties[6]);        /// see [Character.distinctiveFeatures]
        static final distinctiveFeatures = QueryStringProperty<Character>(_entities[1].properties[7]);        /// see [Character.flaws]
        static final flaws = QueryStringProperty<Character>(_entities[1].properties[8]);        /// see [Character.travellingGear]
        static final travellingGear = QueryStringProperty<Character>(_entities[1].properties[9]);        /// see [Character.age]
        static final age = QueryIntegerProperty<Character>(_entities[1].properties[10]);        /// see [Character.treasure]
        static final treasure = QueryIntegerProperty<Character>(_entities[1].properties[11]);        /// see [Character.strengthTn]
        static final strengthTn = QueryIntegerProperty<Character>(_entities[1].properties[12]);        /// see [Character.strengthRating]
        static final strengthRating = QueryIntegerProperty<Character>(_entities[1].properties[13]);        /// see [Character.endurance]
        static final endurance = QueryIntegerProperty<Character>(_entities[1].properties[14]);        /// see [Character.heartTn]
        static final heartTn = QueryIntegerProperty<Character>(_entities[1].properties[15]);        /// see [Character.heartRating]
        static final heartRating = QueryIntegerProperty<Character>(_entities[1].properties[16]);        /// see [Character.hope]
        static final hope = QueryIntegerProperty<Character>(_entities[1].properties[17]);        /// see [Character.witsTn]
        static final witsTn = QueryIntegerProperty<Character>(_entities[1].properties[18]);        /// see [Character.witsRating]
        static final witsRating = QueryIntegerProperty<Character>(_entities[1].properties[19]);        /// see [Character.parry]
        static final parry = QueryIntegerProperty<Character>(_entities[1].properties[20]);        /// see [Character.adventurePoint]
        static final adventurePoint = QueryIntegerProperty<Character>(_entities[1].properties[21]);        /// see [Character.skillPoints]
        static final skillPoints = QueryIntegerProperty<Character>(_entities[1].properties[22]);        /// see [Character.fellowshipScore]
        static final fellowshipScore = QueryIntegerProperty<Character>(_entities[1].properties[23]);        /// see [Character.currentEndurance]
        static final currentEndurance = QueryIntegerProperty<Character>(_entities[1].properties[24]);        /// see [Character.load]
        static final load = QueryIntegerProperty<Character>(_entities[1].properties[25]);        /// see [Character.fatigue]
        static final fatigue = QueryIntegerProperty<Character>(_entities[1].properties[26]);        /// see [Character.currentHope]
        static final currentHope = QueryIntegerProperty<Character>(_entities[1].properties[27]);        /// see [Character.shadow]
        static final shadow = QueryIntegerProperty<Character>(_entities[1].properties[28]);        /// see [Character.shadowScars]
        static final shadowScars = QueryIntegerProperty<Character>(_entities[1].properties[29]);        /// see [Character.valour]
        static final valour = QueryIntegerProperty<Character>(_entities[1].properties[30]);        /// see [Character.wisdom]
        static final wisdom = QueryIntegerProperty<Character>(_entities[1].properties[31]);        /// see [Character.weary]
        static final weary = QueryBooleanProperty<Character>(_entities[1].properties[32]);        /// see [Character.miserable]
        static final miserable = QueryBooleanProperty<Character>(_entities[1].properties[33]);        /// see [Character.wounded]
        static final wounded = QueryBooleanProperty<Character>(_entities[1].properties[34]);          /// see [Character.rewards]
          static final rewards = QueryRelationToMany<Character, Reward>(_entities[1].relations[0]);          /// see [Character.virtues]
          static final virtues = QueryRelationToMany<Character, Virtue>(_entities[1].relations[1]);          /// see [Character.weapons]
          static final weapons = QueryRelationToMany<Character, Weapon>(_entities[1].relations[2]);          /// see [Character.armour]
          static final armour = QueryRelationToMany<Character, Armour>(_entities[1].relations[3]);          /// see [Character.combatProficiencies]
          static final combatProficiencies = QueryRelationToMany<Character, CombatProficiencies>(_entities[1].relations[4]);}
    
      /// [CombatProficiencies] entity fields to define ObjectBox queries.
      class CombatProficiencies_ {        /// see [CombatProficiencies.id]
        static final id = QueryIntegerProperty<CombatProficiencies>(_entities[2].properties[0]);        /// see [CombatProficiencies.proficiency]
        static final proficiency = QueryIntegerProperty<CombatProficiencies>(_entities[2].properties[1]);        /// see [CombatProficiencies.name]
        static final name = QueryStringProperty<CombatProficiencies>(_entities[2].properties[2]);        /// see [CombatProficiencies.character]
        static final character = QueryRelationToOne<CombatProficiencies, Character>(_entities[2].properties[3]);}
    
      /// [Reward] entity fields to define ObjectBox queries.
      class Reward_ {        /// see [Reward.id]
        static final id = QueryIntegerProperty<Reward>(_entities[3].properties[0]);        /// see [Reward.name]
        static final name = QueryStringProperty<Reward>(_entities[3].properties[1]);        /// see [Reward.note]
        static final note = QueryStringProperty<Reward>(_entities[3].properties[2]);        /// see [Reward.armourId]
        static final armourId = QueryIntegerProperty<Reward>(_entities[3].properties[3]);        /// see [Reward.weaponId]
        static final weaponId = QueryIntegerProperty<Reward>(_entities[3].properties[4]);}
    
      /// [Skill] entity fields to define ObjectBox queries.
      class Skill_ {        /// see [Skill.id]
        static final id = QueryIntegerProperty<Skill>(_entities[4].properties[0]);        /// see [Skill.pips]
        static final pips = QueryIntegerProperty<Skill>(_entities[4].properties[1]);        /// see [Skill.name]
        static final name = QueryStringProperty<Skill>(_entities[4].properties[2]);        /// see [Skill.isFavored]
        static final isFavored = QueryBooleanProperty<Skill>(_entities[4].properties[3]);        /// see [Skill.character]
        static final character = QueryRelationToOne<Skill, Character>(_entities[4].properties[4]);        /// see [Skill.skillClass]
        static final skillClass = QueryStringProperty<Skill>(_entities[4].properties[5]);}
    
      /// [Virtue] entity fields to define ObjectBox queries.
      class Virtue_ {        /// see [Virtue.id]
        static final id = QueryIntegerProperty<Virtue>(_entities[5].properties[0]);        /// see [Virtue.name]
        static final name = QueryStringProperty<Virtue>(_entities[5].properties[1]);        /// see [Virtue.note]
        static final note = QueryStringProperty<Virtue>(_entities[5].properties[2]);}
    
      /// [Weapon] entity fields to define ObjectBox queries.
      class Weapon_ {        /// see [Weapon.id]
        static final id = QueryIntegerProperty<Weapon>(_entities[6].properties[0]);        /// see [Weapon.damage]
        static final damage = QueryIntegerProperty<Weapon>(_entities[6].properties[1]);        /// see [Weapon.injury]
        static final injury = QueryIntegerProperty<Weapon>(_entities[6].properties[2]);        /// see [Weapon.name]
        static final name = QueryStringProperty<Weapon>(_entities[6].properties[3]);        /// see [Weapon.note]
        static final note = QueryStringProperty<Weapon>(_entities[6].properties[4]);}
    
    